-- Fix user_variable_preferences table - Final Version
-- Run this in your Supabase SQL Editor
-- This script ensures the table has the correct structure and relationships

-- First, check if the table exists and create it with correct structure
-- Only include columns that actually exist according to frontend code
CREATE TABLE IF NOT EXISTS user_variable_preferences (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    variable_id UUID NOT NULL REFERENCES variables(id) ON DELETE CASCADE,
    
    -- Core settings (only columns that exist in frontend)
    is_shared BOOLEAN DEFAULT false,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure unique constraint
    UNIQUE(user_id, variable_id)
);

-- Ensure foreign key constraints exist (in case table existed without them)
DO $$
BEGIN
    -- Check if foreign key to auth.users exists
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_type = 'FOREIGN KEY' 
        AND table_name = 'user_variable_preferences' 
        AND constraint_name LIKE '%user_id%'
    ) THEN
        ALTER TABLE user_variable_preferences 
        ADD CONSTRAINT user_variable_preferences_user_id_fkey 
        FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;

    -- Check if foreign key to variables exists
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_type = 'FOREIGN KEY' 
        AND table_name = 'user_variable_preferences' 
        AND constraint_name LIKE '%variable_id%'
    ) THEN
        ALTER TABLE user_variable_preferences 
        ADD CONSTRAINT user_variable_preferences_variable_id_fkey 
        FOREIGN KEY (variable_id) REFERENCES variables(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_user_id ON user_variable_preferences(user_id);
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_variable_id ON user_variable_preferences(variable_id);
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_is_shared ON user_variable_preferences(is_shared);
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_user_variable ON user_variable_preferences(user_id, variable_id);

-- Enable Row Level Security (RLS)
ALTER TABLE user_variable_preferences ENABLE ROW LEVEL SECURITY;

-- Drop existing policies to avoid conflicts
DROP POLICY IF EXISTS "Users can view own variable preferences" ON user_variable_preferences;
DROP POLICY IF EXISTS "Users can manage own variable preferences" ON user_variable_preferences;
DROP POLICY IF EXISTS "Users can insert own variable preferences" ON user_variable_preferences;
DROP POLICY IF EXISTS "Users can update own variable preferences" ON user_variable_preferences;
DROP POLICY IF EXISTS "Users can delete own variable preferences" ON user_variable_preferences;

-- Create comprehensive RLS policies
CREATE POLICY "Users can view own variable preferences" ON user_variable_preferences
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own variable preferences" ON user_variable_preferences
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own variable preferences" ON user_variable_preferences
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete own variable preferences" ON user_variable_preferences
    FOR DELETE USING (auth.uid() = user_id);

-- Add trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_user_variable_preferences_updated_at ON user_variable_preferences;
CREATE TRIGGER update_user_variable_preferences_updated_at
    BEFORE UPDATE ON user_variable_preferences
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Verify the table structure
DO $$
DECLARE
    table_exists BOOLEAN;
    constraint_count INTEGER;
    policy_count INTEGER;
BEGIN
    -- Check if table exists
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'user_variable_preferences'
    ) INTO table_exists;
    
    -- Count foreign key constraints
    SELECT COUNT(*) INTO constraint_count
    FROM information_schema.table_constraints 
    WHERE constraint_type = 'FOREIGN KEY' 
    AND table_name = 'user_variable_preferences';
    
    -- Count RLS policies
    SELECT COUNT(*) INTO policy_count
    FROM pg_policies 
    WHERE tablename = 'user_variable_preferences';
    
    -- Report status
    RAISE NOTICE 'Table exists: %', table_exists;
    RAISE NOTICE 'Foreign key constraints: %', constraint_count;
    RAISE NOTICE 'RLS policies: %', policy_count;
    
    IF table_exists AND constraint_count >= 2 AND policy_count >= 4 THEN
        RAISE NOTICE '✅ user_variable_preferences table is properly configured!';
    ELSE
        RAISE NOTICE '❌ Table setup incomplete. Please check the configuration.';
    END IF;
END $$; 