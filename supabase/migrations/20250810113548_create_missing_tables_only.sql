-- ============================================================================
-- CREATE MISSING TABLES AND FIX AUTH ERRORS
-- ============================================================================
-- This migration creates only the essential tables that are missing and causing errors
-- ============================================================================

-- ============================================================================
-- STEP 1: Create data_points table (seems to be missing entirely)
-- ============================================================================

CREATE TABLE IF NOT EXISTS data_points (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    variable_id UUID,
    
    -- Core data fields
    value TEXT NOT NULL,
    notes TEXT,
    date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Confirmation for auto-tracked data
    confirmed BOOLEAN DEFAULT TRUE,
    
    -- Metadata
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Constraints
    CONSTRAINT data_points_value_check CHECK (value IS NOT NULL AND value != ''),
    CONSTRAINT data_points_user_id_check CHECK (user_id IS NOT NULL)
);

-- ============================================================================
-- STEP 2: Create user_variable_preferences table
-- ============================================================================

CREATE TABLE IF NOT EXISTS user_variable_preferences (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    variable_id UUID NOT NULL,
    is_shared BOOLEAN DEFAULT false,
    display_unit TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, variable_id)
);

-- ============================================================================
-- STEP 3: Add foreign key constraints only if variables table exists
-- ============================================================================

-- Add foreign key from data_points to variables if variables table exists
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'variables') THEN
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.table_constraints 
            WHERE constraint_name = 'data_points_variable_id_fkey'
            AND table_name = 'data_points'
        ) THEN
            ALTER TABLE data_points 
            ADD CONSTRAINT data_points_variable_id_fkey 
            FOREIGN KEY (variable_id) REFERENCES variables(id) ON DELETE CASCADE;
            RAISE NOTICE 'Added foreign key constraint from data_points to variables';
        END IF;
    ELSE
        RAISE NOTICE 'Variables table does not exist, skipping foreign key constraint for data_points';
    END IF;
END $$;

-- Add foreign key from user_variable_preferences to variables if variables table exists
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'variables') THEN
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.table_constraints 
            WHERE constraint_name = 'user_variable_preferences_variable_id_fkey'
            AND table_name = 'user_variable_preferences'
        ) THEN
            ALTER TABLE user_variable_preferences 
            ADD CONSTRAINT user_variable_preferences_variable_id_fkey 
            FOREIGN KEY (variable_id) REFERENCES variables(id) ON DELETE CASCADE;
            RAISE NOTICE 'Added foreign key constraint from user_variable_preferences to variables';
        END IF;
    ELSE
        RAISE NOTICE 'Variables table does not exist, skipping foreign key constraint for user_variable_preferences';
    END IF;
END $$;

-- ============================================================================
-- STEP 4: Enable RLS with optimized auth function calls
-- ============================================================================

-- Enable RLS on data_points
ALTER TABLE data_points ENABLE ROW LEVEL SECURITY;

-- Create optimized RLS policy for data_points
CREATE POLICY "Users can manage their own data points" ON data_points
    FOR ALL USING ((select auth.uid()) = user_id);

-- Enable RLS on user_variable_preferences
ALTER TABLE user_variable_preferences ENABLE ROW LEVEL SECURITY;

-- Create optimized RLS policy for user_variable_preferences
CREATE POLICY "Users can manage own variable preferences" ON user_variable_preferences
    FOR ALL USING ((select auth.uid()) = user_id);

-- ============================================================================
-- STEP 5: Create essential indexes
-- ============================================================================

-- Indexes for data_points
CREATE INDEX IF NOT EXISTS idx_data_points_user_id ON data_points(user_id);
CREATE INDEX IF NOT EXISTS idx_data_points_variable_id ON data_points(variable_id);
CREATE INDEX IF NOT EXISTS idx_data_points_date ON data_points(date);
CREATE INDEX IF NOT EXISTS idx_data_points_confirmed ON data_points(confirmed);
CREATE INDEX IF NOT EXISTS idx_data_points_user_variable ON data_points(user_id, variable_id);

-- Indexes for user_variable_preferences
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_user_id ON user_variable_preferences(user_id);
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_variable_id ON user_variable_preferences(variable_id);
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_user_variable ON user_variable_preferences(user_id, variable_id);

-- ============================================================================
-- STEP 6: Grant necessary permissions
-- ============================================================================

-- Grant permissions to authenticated users
GRANT SELECT, INSERT, UPDATE, DELETE ON data_points TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON user_variable_preferences TO authenticated;

-- ============================================================================
-- VERIFICATION
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'Essential tables created successfully: data_points, user_variable_preferences';
    RAISE NOTICE 'RLS enabled with optimized (select auth.uid()) pattern';
    RAISE NOTICE 'Performance indexes and permissions granted';
    RAISE NOTICE 'Foreign key constraints added where possible (depends on variables table existence)';
END $$;
