-- Fix user_variable_preferences table to ensure it has the proper constraints and structure

-- First, check what we have
DO $$
BEGIN
    RAISE NOTICE 'Checking user_variable_preferences table structure...';
    
    -- Check if the table exists
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'user_variable_preferences') THEN
        RAISE NOTICE 'Table exists, checking structure...';
    ELSE
        RAISE NOTICE 'Table does not exist, will create it...';
    END IF;
END $$;

-- Create the table if it doesn't exist, or ensure it has the right structure
CREATE TABLE IF NOT EXISTS user_variable_preferences (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    variable_id UUID NOT NULL REFERENCES variables(id) ON DELETE CASCADE,
    display_unit TEXT, -- Store unit_id as text for simplicity
    is_shared BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Clean up any duplicate entries before adding unique constraint
DELETE FROM user_variable_preferences 
WHERE id NOT IN (
    SELECT MIN(id) 
    FROM user_variable_preferences 
    GROUP BY user_id, variable_id
);

-- Ensure we have the unique constraint
ALTER TABLE user_variable_preferences 
DROP CONSTRAINT IF EXISTS user_variable_preferences_user_id_variable_id_key;

ALTER TABLE user_variable_preferences 
ADD CONSTRAINT user_variable_preferences_user_id_variable_id_key 
UNIQUE (user_id, variable_id);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_user_id 
ON user_variable_preferences(user_id);

CREATE INDEX IF NOT EXISTS idx_user_variable_preferences_variable_id 
ON user_variable_preferences(variable_id);

-- Enable RLS
ALTER TABLE user_variable_preferences ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
DROP POLICY IF EXISTS "Users can manage their own variable preferences" ON user_variable_preferences;
CREATE POLICY "Users can manage their own variable preferences" 
ON user_variable_preferences FOR ALL 
USING ((SELECT auth.uid()) = user_id);

-- Grant permissions
GRANT ALL ON user_variable_preferences TO authenticated;

-- Grant usage on sequence if it exists
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_sequences WHERE schemaname = 'public' AND sequencename = 'user_variable_preferences_id_seq') THEN
        GRANT USAGE ON SEQUENCE user_variable_preferences_id_seq TO authenticated;
        RAISE NOTICE 'Granted usage on sequence user_variable_preferences_id_seq';
    ELSE
        RAISE NOTICE 'Sequence user_variable_preferences_id_seq does not exist';
    END IF;
END $$;

-- Verify the structure
DO $$
DECLARE
    rec RECORD;
BEGIN
    RAISE NOTICE 'Final table structure:';
    FOR rec IN 
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'user_variable_preferences' 
        AND table_schema = 'public'
        ORDER BY ordinal_position
    LOOP
        RAISE NOTICE '  - %: % (nullable: %)', rec.column_name, rec.data_type, rec.is_nullable;
    END LOOP;
    
    RAISE NOTICE 'Constraints:';
    FOR rec IN 
        SELECT constraint_name, constraint_type
        FROM information_schema.table_constraints 
        WHERE table_name = 'user_variable_preferences' 
        AND table_schema = 'public'
    LOOP
        RAISE NOTICE '  - %: %', rec.constraint_name, rec.constraint_type;
    END LOOP;
END $$;

-- Test the fixed function
DO $$
DECLARE
    test_result BOOLEAN;
    test_user_id UUID := '00000000-0000-0000-0000-000000000001';
    broccoli_var_id UUID := '3f123d63-4f5a-4c94-8518-1f97858cfcfa';
BEGIN
    RAISE NOTICE 'Testing set_user_unit_preference after table fix...';
    
    SELECT set_user_unit_preference(
        test_user_id, 
        broccoli_var_id, 
        'kg', 
        'mass'
    ) INTO test_result;
    
    IF test_result THEN
        RAISE NOTICE '✅ SUCCESS: set_user_unit_preference now works!';
    ELSE
        RAISE NOTICE '❌ FAILED: set_user_unit_preference still returning false';
    END IF;
    
    -- Clean up test data
    DELETE FROM user_variable_preferences 
    WHERE user_id = test_user_id 
    AND variable_id = broccoli_var_id;
    
    RAISE NOTICE 'Test cleanup completed.';
END $$;
